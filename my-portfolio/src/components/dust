import React, { useEffect, useRef } from "react";

function CanvasText() {
  const canvasRef = useRef(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext("2d");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    let particleArray = [];

    const mouse = {
      x: null,
      y: null,
      radius: 150,
    };

    window.addEventListener("mousemove", (e) => {
      mouse.x = e.x;
      mouse.y = e.y;
    });

    ctx.fillStyle = "#715df2";
    ctx.font = "50px sans-serif";
    ctx.fillText("HI, I'M EJEZIE", 20, 60);
    // ctx.strokeStyle = "black";
    // ctx.strokeRect(0, 0, 400, 100);
    const data = ctx.getImageData(0, 0, 400, 100);

    class Particle {
      constructor(x, y) {
        this.x = x;
        this.y = y;
        this.size = 0.3;
        this.baseX = this.x;
        this.baseY = this.y;
        this.density = (Math.random() * 40) + 5;
      }
      draw() {
        ctx.fillStyle = "#715df2";
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.closePath();
        ctx.fill();
      }
      update() {
        let dx = mouse.x - this.x;
        let dy = mouse.y - this.y;
        let distance = Math.sqrt(dx * dx + dy * dy);
        let forceDirectionX = dx / distance;
        let forceDirectionY = dy / distance;
        let maxDistance = mouse.radius;
        let force = (maxDistance - distance) / maxDistance;
        let directionX = forceDirectionX * force * this.density;
        let directionY = forceDirectionY * force * this.density;
        if (distance < mouse.radius) {
          this.x -= directionX;
          this.y -= directionY;
        } else {
          if(this.x !== this.baseX){
            let dx = this.x - this.baseX;
            this.x -= dx/10 
          }
          if(this.y !== this.baseY){
            let dy = this.y - this.baseY;
            this.y -= dy/10 
          }
        }
      }
    }

    const init = () => {
      particleArray = [];
      for (let i = 0; i < 25000; i++) {
        let x = Math.random() * canvas.width;
        let y = Math.random() * canvas.height;
        particleArray.push(new Particle(x, y));
      }
    };
    init();
    console.log(particleArray);

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      for (let i = 0; i < particleArray.length; i++) {
        particleArray[i].draw();
        particleArray[i].update();
      }
      requestAnimationFrame(animate);
    };
    animate();
  }, []);

  return (
    <canvas id="canvas" ref={canvasRef} height="100%" width="100%"></canvas>
  );
}

export default CanvasText;

import React, { useState } from "react";
import Title from "../components/Title";
import mewzik from "../images/mewzik.png";
import webp from "../images/webp.png";
import house from "../images/house.png";
import port from "../images/port.png";
import dora from "../images/dora.png";
import movies from "../images/movies.png";

function PortfolioPage() {
  const [current, setCurrent] = useState(0);

  const items = [
    { name: mewzik, text: " httml, css and javascript" },
    { name: webp, text: " httml, css and javascript" },
    { name: house, text: " httml, css and javascript" },
    { name: port, text: " httml, css and javascript" },
    { name: dora, text: " httml, css and javascript" },
    { name: movies, text: " httml, css and javascript" },
  ];

  const lenght = items.length;
  console.log(lenght);

  const nextSlide = () => {
    setCurrent(current === lenght - 1 ? 0 : current + 1);
    console.log("click");
  };
  const prevSlide = () => {
    setCurrent(current === 0 ? lenght - 1 : current - 1);
    // console.log("click");
  };
  console.log(current);

  return (
    <div className="portfolio">
      <div className="portfolio__heading">
        <Title title={"PORTFOLIO"} span={"PORTFOLIO"} />
      </div>

      <div className="portfolio__wrap">
        <i class="fas fa-arrow-circle-left" onClick={prevSlide}></i>
        <i class="fas fa-arrow-circle-right" onClick={nextSlide}></i>
        {items.map((item, index) => (
          <div className="image__wrapper">
            <div
              className={index === current ? "slide active" : "item"}
              key={index}>
              {index === current && (
                <img
                  src={item.name}
                  alt="music_page"
                  className="image__slide"
                />
              )}

              <div className="image__hover">
                <p>{item.text}</p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default PortfolioPage;
